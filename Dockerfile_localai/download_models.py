"""
A script that downloads model files and creates template files using a JSON configuration
specified in the environment variable MODEL_SETUP_CONFIG. The configuration should be in the
following format:

{
    "models": [
        {
            "name": "modelname1",
            "url": "https://gpt4all.io/models/ggml-gpt4all-j.bin",            
        },
        {
            "name": "modelname2",
            "url": "https://gpt4all.io/models/ggml-gpt4all-j.bin",            
        }
    ],
    "templates": [
        {
            "name": "template1",
            "content": "this is the text content of the template. Newlines have to be replaced by literally \n"
        },
        {
            "name": "template2",
            "content": "blabla"
        }
    ]
}

The model files are downloaded using curl and saved in the /model directory with the
specified filenames. The template files are created by writing the content to a file with
the specified name and the .tmpl extension.

This script was generated by ChatGPT.
"""

import os
import json
import subprocess
import traceback
from pathlib import Path

if not Path("/models").exists():
    Path("/models").mkdir()

config_str = os.environ.get("MODEL_SETUP_CONFIG")
if not config_str:
    raise ValueError("MODEL_SETUP_CONFIG environment variable not set")

config = json.loads(config_str)

if not isinstance(config, dict):
    raise ValueError(
        f"MODEL_SETUP_CONFIG is expected to be an object, not {type(config)}"
    )

models = config.get("models")
if not models:
    raise ValueError("MODEL_SETUP_CONFIG is missing required field `models`")

successful = 0
for model in models:
    url = model.get("url")
    name = model.get("name")

    if not all([url, name]):
        raise ValueError("Invalid model configuration: missing url or name")

    try:
        subprocess.check_call(
            # curl will skip download if file is already present and of same size
            # as remote file
            ["curl", "-L", "-C", "-", url, "--progress-bar", "-o", f"/models/{name}"]
        )
        successful += 1
    except Exception as e:
        print(f"Error downloading model {name} from {url}:")
        traceback.print_exc()

print(f"{successful}/{len(models)} model downloads completed successfully")

# Create the template files
for template in config["templates"]:
    name = template.get("name")
    content = template.get("content")
    if not all([name, content]):
        raise ValueError("Invalid template configuration: missing name or content")

    print(f"Creating template {template['name']}")
    with open(f"/models/{template['name']}.tmpl", "w") as f:
        # since json string do not allow newlines, we encode them as \n and replace them
        # with real ones here
        f.write(template["content"].replace(r"\n", "\n"))
